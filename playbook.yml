---
- hosts: kube_node
  name: Prepare the system
  become: yes
  tasks:

    - name: Check if the system is updated
      stat:
        path: /var/lib/apt/periodic/update-success-stamp
      register: system_updated
      changed_when: false
      failed_when: false

    - name: Update the system
      apt:
        update_cache: yes
        upgrade: yes
        cache_valid_time: 3600
        force_apt_get: yes
        autoremove: yes
        autoclean: yes
      when: not system_updated.stat.exists

    - name: Set the timezone
      timezone:
        name: "{{ timezone }}"

    - name: Set the hostname
      hostname:
        name: "{{ inventory_hostname }}.{{ domain }}"

    - name: Populate inventory into hosts file
      blockinfile:
        path: /etc/hosts
        block: |
          {% for host in groups['all'] %}
          {% if hostvars[host]['inventory_hostname'] != inventory_hostname %}
          {{ hostvars[host]['ip'] }} {{ hostvars[host]['inventory_hostname'] }}.{{ domain }}
          {% endif %}
          {% endfor %}
        state: present

    - name: Set domain names for 127.0.0.1
      lineinfile:
        path: /etc/hosts
        regexp: "^127.0.0.1"
        line: "127.0.0.1 localhost {{ inventory_hostname }}.{{ domain }}"
        state: present

    - name: Check if overlay module is loaded
      command: lsmod | grep -q overlay
      register: modules_loaded_overlay
      changed_when: false
      failed_when: false

    - name: Check if br_netfilter module is loaded
      command: lsmod | grep -q br_netfilter
      register: modules_loaded_br_netfilter
      changed_when: false
      failed_when: false

    - name: Check sysctl parameters
      command: sysctl -a
      register: sysctl_params
      changed_when: false
      failed_when: false

    - name: Add overlay and br_netfilter to /etc/modules-load.d/k8s.conf
      blockinfile:
        path: /etc/modules-load.d/k8s.conf
        block: |
          overlay
          br_netfilter
        state: present
        create: yes
      when: not (modules_loaded_overlay.rc or modules_loaded_br_netfilter.rc)

    - name: Add sysctl params to /etc/sysctl.d/k8s.conf
      blockinfile:
        path: /etc/sysctl.d/k8s.conf
        block: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        state: present
        create: yes
      when: not ('bridge-nf-call-iptables = 1' in sysctl_params.stdout or
                 'bridge-nf-call-ip6tables = 1' in sysctl_params.stdout or
                 'net.ipv4.ip_forward = 1' in sysctl_params.stdout)

    - name: Load kernel modules
      shell: modprobe overlay br_netfilter && sysctl --system
      when: not (modules_loaded_overlay.rc or modules_loaded_br_netfilter.rc or not sysctl_params.rc)

    - name: Check if containerd is installed
      stat:
        path: /usr/local/bin/containerd
      register: containerd_installed
      changed_when: false
      failed_when: false

    - name: Containerd installation block
      block:
        - name: Download containerd
          get_url:
            url: "{{ containerd_download_url }}"
            dest: $HOME
            timeout: 60
            mode: 0755
          register: containerd_download_result
          changed_when: false
          failed_when: false

        - name: Extract containerd to /usr/local/bin/
          unarchive:
            src: "{{ containerd_download_result.dest }}"
            dest: /usr/local/
            remote_src: yes
            creates: /usr/local/bin/containerd
      when: not containerd_installed.stat.exists

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: 0755

    - name: Check if containerd config file exists
      stat:
        path: /etc/containerd/config.toml
      register: containerd_config_exists
      changed_when: false
      failed_when: false

    - name: Create containerd config file
      shell: |
        containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml
      when: not containerd_config_exists.stat.exists

    - name: Check if SystemdCgroup is enabled in containerd config file
      command: cat /etc/containerd/config.toml | grep 'SystemdCgroup = true'
      register: containerd_systemd_cgroup_enabled
      changed_when: false
      failed_when: false

    - name: Enable SystemdCgroup in containerd config file
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
      when: not containerd_systemd_cgroup_enabled.rc

    - name: Check if pause image is set in containerd config file
      command: cat /etc/containerd/config.toml | grep 'sandbox_image = "registry.k8s.io/pause:3.9"'
      register: containerd_pause_image_changed
      changed_when: false
      failed_when: false

    - name: Set the default pause image to registry.k8s.io
      replace:
        path: /etc/containerd/config.toml
        regexp: 'sandbox_image = .*$'
        replace: 'sandbox_image = "registry.k8s.io/pause:3.9"'
      when: not containerd_pause_image_changed.rc

    - name: Check if containerd service file is downloaded
      stat:
        path: /etc/systemd/system/containerd.service
      register: containerd_service_file_download
      changed_when: false
      failed_when: false

    - name: Download containerd service file
      get_url:
        url: https://raw.githubusercontent.com/containerd/cri/master/contrib/systemd-units/containerd.service
        dest: /etc/systemd/system/containerd.service
        mode: 0644
      when: not containerd_service_file_download.stat.exists

    - name: Start & enable containerd
      systemd:
        name: containerd
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Check if runc is installed
      stat:
        path: /usr/local/bin/runc
      register: runc_installed
      changed_when: false
      failed_when: false

    - name: Download and install runc
      get_url:
        url: "{{ runc_download_url }}"
        dest: /usr/local/bin/runc
        timeout: 60
        mode: 0755
      when: not runc_installed.stat.exists

    - name: Check if CNI plugins are downloaded
      stat:
        path: /opt/cni/bin/bridge
      register: cni_plugins_installed
      changed_when: false
      failed_when: false

    - name: CNI plugins installation block
      block:

        - name: Download CNI plugins
          get_url:
            url: "{{ cni_plugins_download_url }}"
            dest: /tmp/
            timeout: 60
            mode: 0755
          register: cni_plugins_download_result

        - name: Create CNI plugins directory
          file:
            path: /opt/cni/bin
            state: directory
            mode: 0755

        - name: Extract CNI plugins to /opt/cni/bin
          unarchive:
            src: "{{ cni_plugins_download_result.dest }}"
            dest: /opt/cni/bin
            remote_src: yes
            creates: /opt/cni/bin/bridge

      when: not cni_plugins_installed.stat.exists

    - name: Install packages needed to use the Kubernetes apt repository
      apt:
        name:
          - ca-certificates
          - curl
        state: latest
        update_cache: yes

    - name: Check if Kubernetes apt keyring is downloaded
      stat:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      register: k8s_apt_keyring_installed
      changed_when: false
      failed_when: false

    - name: Download the public signing key for the Kubernetes package repositories
      shell: |
        rm -rf /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      when: not k8s_apt_keyring_installed.stat.exists

    - name: Add the Kubernetes apt repository
      apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
        state: present

    - name: Install kubelet, kubeadm, and kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: latest
        update_cache: yes
