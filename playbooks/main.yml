---
- hosts: kube_node
  name: Prepare the system
  become: yes
  tasks:

    - name: Update the system
      apt:
        update_cache: yes
        upgrade: yes
        cache_valid_time: 3600
        force_apt_get: yes
        autoremove: yes
        autoclean: yes

    - name: Set the timezone
      timezone:
        name: "{{ timezone }}"

    - name: Set the hostname
      hostname:
        name: "{{ inventory_hostname }}.{{ domain }}"

    - name: Populate inventory into hosts file
      blockinfile:
        path: /etc/hosts
        block: |
          {% for host in groups['all'] %}
          {% if hostvars[host]['inventory_hostname'] != inventory_hostname %}
          {{ hostvars[host]['ip'] }} {{ hostvars[host]['inventory_hostname'] }}.{{ domain }}
          {% endif %}
          {% endfor %}
        state: present

    - name: Set domain names for 127.0.0.1
      lineinfile:
        path: /etc/hosts
        regexp: "^127.0.0.1"
        line: "127.0.0.1 localhost {{ inventory_hostname }}.{{ domain }}"
        state: present

    - name: Add overlay and br_netfilter to /etc/modules-load.d/k8s.conf
      blockinfile:
        path: /etc/modules-load.d/k8s.conf
        block: |
          overlay
          br_netfilter
        state: present
        create: yes

    - name: Add sysctl params to /etc/sysctl.d/k8s.conf
      blockinfile:
        path: /etc/sysctl.d/k8s.conf
        block: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        state: present
        create: yes

    - name: Load kernel modules
      shell: |
        modprobe overlay
        modprobe br_netfilter

        sysctl --system

    - name: Download containerd
      get_url:
        url: "{{ containerd_download_url }}"
        dest: /tmp/
        timeout: 60
        mode: 0755
      register: containerd_download_result

    - name: Extract containerd to /usr/local/bin/
      unarchive:
        src: "{{ containerd_download_result.dest }}"
        dest: /usr/local/
        remote_src: yes
        creates: /usr/local/bin/containerd

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: 0755

    - name: Create containerd config file
      shell: |
        containerd config default > /etc/containerd/config.toml

    - name: Enable SystemdCgroup in containerd config file
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Set the default pause image to registry.k8s.io
      replace:
        path: /etc/containerd/config.toml
        regexp: 'sandbox_image = .*$'
        replace: 'sandbox_image = "registry.k8s.io/pause:3.9"'

    - name: Download containerd service file
      get_url:
        url: https://raw.githubusercontent.com/containerd/cri/master/contrib/systemd-units/containerd.service
        dest: /etc/systemd/system/containerd.service
        mode: 0644

    - name: (Re)start & enable containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: Download and install runc
      get_url:
        url: "{{ runc_download_url }}"
        dest: /usr/local/bin/runc
        timeout: 60
        mode: 0755

    - name: Download CNI plugins
      get_url:
        url: "{{ cni_plugins_download_url }}"
        dest: /tmp/
        timeout: 60
        mode: 0755
      register: cni_plugins_download_result

    - name: Create CNI plugins directory
      file:
        path: /opt/cni/bin
        state: directory
        mode: 0755

    - name: Extract CNI plugins to /opt/cni/bin
      unarchive:
        src: "{{ cni_plugins_download_result.dest }}"
        dest: /opt/cni/bin
        remote_src: yes
        creates: /opt/cni/bin/bridge

    - name: Install packages needed to use the Kubernetes apt repository
      apt:
        name:
          - ca-certificates
          - curl
        state: latest
        update_cache: yes

    - name: Download the public signing key for the Kubernetes package repositories
      shell: |
        rm -rf /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add the Kubernetes apt repository
      apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
        state: present

    - name: Install kubelet, kubeadm, and kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: latest
        update_cache: yes